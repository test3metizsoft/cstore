<div class="main-content">
    <div class="config">
        <div class="config-logo">
            <?php
            $logo_url = $this->getSkinUrl('sm/xpos/images/logo.png');
            if (is_file('media/xpos/' . Mage::getStoreConfig('xpos/customize/logo'))) {
                $logo_url = Mage::getBaseUrl('media') . 'xpos/' . Mage::getStoreConfig('xpos/customize/logo');
            }
            ?>
            <a id="config-button" class="hide"><img src="<?php echo $logo_url; ?>"/></a>
        </div>
    </div>
    <div class="search effect2_"><div id="i_search_"><input type="text" id="search-box" onclick="this.select()" value="" placeholder="Search Product..."/></div> </div>
    <script>
//        jQuery('#i_search :input').fancyInput();
    </script>
    <div id="nav">
        <ul>
            <li class="save level-0">
                <a id="save-button" class="button-save" onclick="saveOrder();removeSelectedPaymentVrShipment()">
                    <span id="order_saved_count" class="value-save"></span>
                </a>
            </li>
            <li class="cancel level-0">
                <a id="save-button" class="button-cancel" onclick="cancelOrder();removeSelectedPaymentVrShipment()"></a>
            </li>
            <li class="new-product level-0">
                <a id="new-product-button" class="button-new" onclick="openProductForm()">New</a>
                <div id="new-product-form" style="display: none">
                </div>
            </li>
            <li class="option level-0">
                <a id="options_checkout_button" class="button-option"
                   onclick="show_options_checkout()"></a>
                <ul class="option-panel" id="option-list">
                    <?php if (!Mage::helper('xpos/configXPOS')->getCheckOutConfirm()) { ?>

                        <?php if (Mage::helper('xpos/configXPOS')->getCreateInvoiceDisplay()): ?>
                            <li class="invoice_option level-1 <?php if (Mage::helper('xpos/configXPOS')->getCreateInvoice()) {
                                echo "active";
                            } ?>" id="invoice_toggle" name="invoice_toggle">
                                <a href="javascript:" id="option1-button" class="option"
                                   onclick="setCheckBox('invoice_toggle');"><?php echo $this->__("Create invoice") ?></a>
                            </li>
                        <?php endif; ?>
                        <?php if (Mage::helper('xpos/configXPOS')->getCreateShipmentDisplay()): ?>
                            <li class="shipment_option level-1 <?php if (Mage::helper('xpos/configXPOS')->getCreateIShipmment()) {
                                echo "active";
                            } ?>" id="shipment_toggle" name="shipment_toggle">
                                <a href="javascript:" id="option1-button" class="option"
                                   onclick="setCheckBox('shipment_toggle');"><?php echo $this->__("Create shipment") ?></a>
                            </li>
                        <?php endif; ?>
                        <li class="level-1 <?php if (Mage::helper('xpos/configXPOS')->getPrintReceipt()) {
                            echo "active";
                        } ?>" id="receipt_toggle" name="receipt_toggle">
                            <a href="javascript:" id="option1-button" class="option"
                               onclick="setCheckBox('receipt_toggle');"><?php echo $this->__("Print receipt") ?></a>
                        </li>
                        <?php if (Mage::getStoreConfig('xpos/receipt/enabled')) { ?>
                            <li class="email-option level-1 <?php if (Mage::getStoreConfig('xpos/receipt/email_receipt')/*&& Mage::getStoreConfig('xpos/general/create_invoice')*/) {
                                echo "active";
                            } ?>" id="mail_toggle" name="mail_toggle" style="dis">
                                <div>
                                    <a href="javascript:" id="option3-button" class="option"
                                       onclick="setCheckBox('mail_toggle');">
                                        <label><?php echo $this->__("Email") ?>:</label>
                                    </a>
                                </div>
                                <div class="input-container">
                                    <input type="email" name="emailreceipt" id="emailreceipt"
                                           placeholder="Email receipt" value=""/>
                                </div>
                            </li>
                        <?php } ?>
                    <?php } ?>

                    <li class="level-1 no-hover" id="order-comment">
                        <a href="javascript:" id="option3-button" class="option">
                            <label><?php echo $this->__("Comment") ?>:</label>
                            <textarea
                                name="order[comment][customer_note]" placeholder="Comments"
                                spellcheck="false"></textarea>
                        </a>
                    </li>
                </ul>
            </li>
            <li class="item_count option level-0">
                <span class="label"><?php echo $this->__("Item: ") ?><!--<i>(s)</i>--></span>
                <span class="value" id="item_count_value">0</span>
            </li>
            <li class="discount option level-0">
                <span class="label"><?php echo $this->__("Discount: ") ?></span>
                <!--<input type="number" id="discount_value" value="0.0">-->
                <!--                                        <span class="value" id="discount_value">0.0</span>-->
                <input class="input-text item-price value" id="discount_display" value="0.00"
                       name="" onchange="change_discount_value()" maxlength="12"/>
                <input type="hidden" class="input-text item-price value" id="discount_value"
                       value="0.00" name="" maxlength="12"/>
                <!-- <span class="value" id="discount_value">0.0</span></input>-->
                <input type="hidden" id="discount_hidden" name="discount_hidden" value=""/>
                <input type="hidden" id="discount_change" name="discount_change" value=""/>
                <input type="hidden" id="discount_hidden_current" name="discount_hidden_current"
                       value=""/>
            </li>
        </ul>
    </div>
    <script>
        /* jQuery('#mail_toggle').click(function() {
         if(!jQuery('#invoice_toggle').hasClass('active')){
         alert('You must create invoice to send Email!');
         jQuery('#mail_toggle').removeClassName('active');
         return false;
         }
         });*/
    </script>
    <div class="checkout">
        <div id="grandtotal" class="total">0.00</div>
        <button id="checkout_mode_button" class="checkout_mode" type="button" onclick="change_checkout_mode()">
            <?php echo $this->__("Online checkout") ?>
        </button>
    </div>
    <div class="clear"></div>
    <div id="dialog-modal" class="popup"></div>
</div>
<script>

    order.commentFieldsBind('order-comment');
    function cancelOrder() {
        if (confirm('<?php echo $this->__("Cancel current order?") ?>')) {
            if (isOnline()) {
                window.location.href = '<?php echo $this->getUrl('*/*/clear') ?>';
            } else {
                clearOrder();
            }
        }
    }

    function showMask() {
        var loaderArea = $$('#html-body .wrapper')[0]; // Blocks all page
        Position.clone($(loaderArea), $('loading-mask'), {offsetLeft:-2});
        toggleSelectsUnderBlock($('loading-mask'), false);
        Element.show('loading-mask');
    }
    var emailChanged = '';
    var isPchange = false;
    jQuery('#emailreceipt').blur(function () {
        emailChanged = jQuery('#emailreceipt').val();
        isPchange = true;
    });

    //    jQuery('#emailreceipt').on('change', function() {
    //        console.log('email change!!!!');
    //        if(isPchange == true && emailChanged != ''){
    //            jQuery('#emailreceipt').val(emailChanged);
    //        }
    //        isPchange = false;
    //    });

    function loadAjax(orders, vt) {
        console.log('go to loadAjax with i=' + vt);
        var newInfo = ' <p class="loader" id="loading_mask_loader"><img src="<?php echo $this->getSkinUrl('sm/xpos/images/ajax-loader-tr.gif') ?>" alt="Loading..."><br>';
        if(
            (parseNumber(window.currentOrderAmount) >= window.maxOrderAmount) &&
            window.isFreeVerion
        ){
            console.log('het han r');
            swal({
                title: "<small>Warning!</small>!",
                text: '<span style="color:#F8BB86">'+"You've exceeded your order limit for the month, to continue to use the X-POS, please upgrade your plan at : <a href='http://xpos.smartosc.com/x-pos/#plan-pricing'>Here</a>"+'<span>',
                html: true
            });
            hideLoadingMask();
            return;
        }
        if (numOfOrder > vt) {
            jQuery('#loading-mask').html(newInfo + 'Sending: ' + (vt + 1) + '/' + numOfOrder + '</p>');
            jQuery.ajax({
                url: '<?php echo $this->getUrl('adminhtml/xpos/completeoffline') ?>',
                data: orders[vt],
                dataType: 'json',
                type: 'POST',
                success: function (data) {
                    if (data['status'] == 'success') {
                        console.log('data success!');
                        saveOrderComplete(orders[vt]);
                        if(window.isFreeVerion){
                            window.currentOrderAmount = window.currentOrderAmount+1;
                            jQuery('#limit-order-label').html(window.currentOrderAmount+'/ '+window.maxOrderAmount+' orders.')
                        }
                    }
                    loadAjax(orders, vt + 1);
                }
            });
        } else {
            removeOrderComplete(orderComplete);
            jQuery('#loading-mask').html(tempLdMask);
        }
    }
    var orderComplete = [];
    var numOfOrder = 0;
    var tempLdMask;
    function saveOrderComplete(order) {
        orderComplete.push(order);
    }
    function removeAllElementOrderComplete() {
        orderComplete.splice(0, orderComplete.length);
        console.log('current Order Complete: ' + orderComplete);
    }

    function submitOfflineNewT() {
        var orders = $.jStorage.get("orders");
        numOfOrder = orders.length;
        if(
            (parseNumber(window.currentOrderAmount) >= window.maxOrderAmount) &&
            window.isFreeVerion
        ){
            console.log('het han r');
            swal({
                title: "<small style='color:#F8BB86'>Warning!</small>!",
                text: '<span style="color:#FFF">'+"You've exceeded your order limit for this month, to continue to use the X-POS, please upgrade your plan at <a href='http://xpos.smartosc.com/x-pos/#plan-pricing' target='_blank'>Here</a>"+'<span>',
                html: true
            });
            hideLoadingMask();
            return;
        }

        if ($.jStorage.get("orders") == null) {
            return;
        }
        if (isOnline()) {
            showMask();
            tempLdMask = jQuery('#loading-mask').html();
            var newInfo = ' <p class="loader" id="loading_mask_loader"><img src="<?php echo $this->getSkinUrl('sm/xpos/images/ajax-loader-tr.gif') ?>" alt="Loading..."><br>';
            if (numOfOrder > 0 && orders[0].length) {
                jQuery('#loading-mask').html(newInfo + 'Sending: ' + '1/' + numOfOrder + '</p>');
                jQuery.ajax({
                    url: '<?php echo $this->getUrl('adminhtml/xpos/completeoffline') ?>',
                    data: orders[0],
                    dataType: 'json',
                    type: 'POST',
                    success: function (data) {
                        if (data['status'] == 'success') {
                            console.log('data success!');
                            saveOrderComplete(orders[0]);
                            if(window.isFreeVerion){
                                window.currentOrderAmount = window.currentOrderAmount+1;
                                jQuery('#limit-order-label').html(window.currentOrderAmount+'/ '+window.maxOrderAmount+'orders.');
                            }
                        }
                        loadAjax(orders, 1);
                    }
                });
            }
            else {
                hideLoadingMask();
                jQuery('#loading-mask').html(tempLdMask);
            }
            transactionMoneyLoaded = false;
        }
        else {
            alert('You are not online!');
        }
    }


    function removeOrderComplete(orderComplete) {
        var orders = $.jStorage.get("orders");
        var numOfSuccsessOrder = orderComplete.length;
        for (i = 0; i < orderComplete.length; i++) {
            var vt = orders.indexOf(orderComplete[i]);
            if (vt != -1) {
                orders.splice(vt, 1);
            }
        }
        $.jStorage.set("orders", orders);
        hideLoadingMask();
        jQuery('#count_pending_orders').html(orders.length);
        removeAllElementOrderComplete();
        alert('Send ' + numOfSuccsessOrder + ' Order Complete!');
    }

    function saveOrder() {
        if (jQuery('#order-items_grid tbody tr').length > 0) {
            order.save('<?php echo $this->getUrl("*/*/save"); ?>', '<?php echo $this->__("Are you sure to save this order and move to new order screen?") ?>');
        } else {
            showOrderSaved();
        }
    }

    function parseOrderInfo(json) {
        var result = "";

        // process items
        delete json['form_key'];
        delete json['entity_id'];
        delete json['limit'];
        delete json['page'];
        delete json['name'];
        delete json['sku'];
        delete json['price[from]'];
        delete json['price[to]'];
        delete json['order[send_confirmation]'];
        delete json['calc_total'];
        delete json['in_products'];
        delete json['order[account][group_id]'];
        delete json['order[shipping_method]'];
        delete json['coupon_code'];
        delete json['ccsave-swiper-data'];
        delete json['balance'];
        // new cust
        delete json['order[billing_address][firstname_temp]'];
        delete json['order[billing_address][lastname_temp]'];


        if (json.shipping_same_as_billing == "on") {
            delete json['order[shipping_address][firstname]'];
            delete json['order[shipping_address][lastname]'];
            delete json['order[shipping_address][street][0]'];
            delete json['order[shipping_address][city]'];
            delete json['order[shipping_address][country_id]'];
            delete json['order[shipping_address][region]'];
            delete json['order[shipping_address][postcode]'];
            delete json['order[shipping_address][telephone]'];
        }


        return '<table><tr><td>' + JSON.stringify(json).substring(2)
                .replace(/item\[/g, 'Product (id:')
                .replace(/]\[qty]/g, ') Qty')
                .replace('order[account][type]', 'Account type')
                .replace('order[customer_id]', 'Customer Id')
                .replace('order[account][email]', 'Customer Email')
                // new customer
                .replace('order[billing_address][firstname]', 'First Name')
                .replace('order[billing_address][lastname]', 'Last Name')
                .replace('order[account][email_temp]', 'Email')
                .replace('order[billing_address][telephone]', 'Phone')

                .replace('shipping_same_as_billing', 'Use billing as shipping address')
                .replace('payment[method]', 'Payment method')
                .replace('order[comment][customer_note]', 'Comments')
                .replace('cash-in', 'Total Paid')
                //        .replace('balance','Refunded')
                .replace(/","/g, '" /></td></tr><tr><td>')
                .replace(/":"/g, '<td><input type="text" value="')
                .replace(/"}/g, '') + '" /></td></tr></table>'


            ;
    }
    function displayLoadingMask() {
        var loaderArea = $$('#html-body .wrapper')[0]; // Blocks all page
        Position.clone($(loaderArea), $('loading-mask'), {offsetLeft: -2});
        toggleSelectsUnderBlock($('loading-mask'), false);
        Element.show('loading-mask');
    }

    function hideLoadingMask() {
        Element.hide('loading-mask');
    }
    function syncShipping(code, title) {
        jQuery("#shipping_detail").html(title);
//        delay(function () {
            order.setShippingMethodSyn(code,title);
//        }, 2000);
    }

    var productTemplateSyntax = /(^|.|\r|\n)({{(\w+)}})/;

    function setSettings(urlTemplate, setElement, typeElement) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        var url = template.evaluate({attribute_set:$F(setElement),type:$F(typeElement)});

        updateProductForm(url);
    }

    function openProductForm(){
        Element.toggle($('new-product-form'));
        Element.toggleClassName($('new-product-button'),'active');
    }

    function updateProductForm(url){
        new Ajax.Updater($('new-product-form'),url, {
            parameters: {isAjax: 'true', form_key: FORM_KEY},
            onSuccess: function(transport) {

            },
            evalScripts:true
        });
    }

    function backToSetSelection(){
        var url = '<?php echo $this->getUrl('*/catalog_product/newXpos') ?>';
        updateProductForm(url);
    }

    function addNewProduct(){

        var fields = $$('.required-entry[name^="product"]');
        var error = false;
        fields.each(function(field){
            if(field.value == ''){
                error = true;
            }
        });

        if(error){
            alert('<?php echo $this->__('Please fill all required fields.') ?>');
            return;
        }

        var product = {};
        var formObject = edit_form.serialize(true);

        for(key in formObject){
            if(stringStartsWith(key, "product[") || stringStartsWith(key, "category_ids")){
                product[key] = formObject[key];
            }
        }

        product.isAjax = true;
        product.set = $('set').value;
        product.type = 'simple';
        var validateUrl = "<?php echo $this->getUrl('*/catalog_product/validate', array('_current'=>true)); ?>";
        new Ajax.Request(validateUrl, {
            parameters: product,
            onSuccess: function(transport) {
                try {
                    if (transport.responseText) {
                        var response = transport.responseText.evalJSON();
                        if(!response.error){
                            saveNewProduct(product);
                        }else{
                            alert(response.message)
                        }
                    }else{
                        alert('Some errors happened!');
                    }
                }
                catch (e) {
                    alert(e.message)
                }
            }
        });
    }

    function saveNewProduct(product){
        var submitUrl = "<?php echo $this->getUrl('*/catalog_product/saveXpos', array('_current'=>true)); ?>";
        new Ajax.Request(submitUrl, {
            parameters: product,
            onSuccess: function(transport) {
                try {
                    if (transport.responseText) {
                        var response = transport.responseText.evalJSON();
                        if(!response.error && response.product_id && response.product){
                            var temProduct = {};
                            for (var property in response.product) {
                                if (response.product.hasOwnProperty(property)) {
                                    if(property == 'entity_id'){
                                        temProduct.id = response.product_id;
                                    }else{
                                        temProduct[property] = response.product[property];
                                    }
                                }
                            }
                            if(!productData[response.product_id]){
                                productData[response.product_id] = temProduct;
                            }
                            addToCart(response.product_id);
                            $('new-product-form').down('.form-container').update('<p>Product successfully added!</p><button title="Back" type="button" class="scalable save" onclick="backToSetSelection();"> <span><span><span>Back</span></span></span></button>');
                        }
                    }
                }
                catch (e) {
                }
            }
        });
    }

    function stringStartsWith (string, prefix) {
        return string.slice(0, prefix.length) == prefix;
    }

    document.observe("dom:loaded", function() {
        backToSetSelection();
    });

</script>
