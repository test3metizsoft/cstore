<?php

    /**
     * Created by PhpStorm.
     * User: vjcspy
     * Date: 6/16/15
     * Time: 6:02 PM
     */
    class SM_XPayment_Model_MultiplePaymentMethod extends Mage_Payment_Model_Method_Abstract
    {
        protected $_code           = 'xpaymentMultiple';
        protected $_canUseInternal = true;
        protected $_canUseCheckout = false;
        protected $_infoBlockType  = 'xpayment/info_xpaymentMultiple';
        protected $_formBlockType  = 'xpayment/form_xpaymentMultiple';
        //protected $_canUseForMultishipping = false;
        //protected $_isGateway = true;
        //protected $_canAuthorize = true;

        protected function _construct()
        {
            parent::_construct(); // TODO: Change the autogenerated stub
        }

        public function authorize(Varien_Object $payment, $amount)
        {
            Mage::log("Dummypayment\tIn authorize");

            $storecreditArray = array(
                SM_StoreCredit_Model_Method_StoreCredit::PAY_CODE,
                SM_StoreCredit_Model_Method_StoreCreditDue::PAY_DUE_CODE
            );
            foreach($storecreditArray as $type){
                if ($this->getPayCredit($type)) {
                    $order = $payment->getOrder();
                    $balance = Mage::getModel('credit/balance')->loadByCustomer($order->getCustomerId());
                    $balance->addTransaction(
                        -1 * $this->getPayCredit($type),
                        Mirasvit_Credit_Model_Transaction::ACTION_USED,
                        array('order' => $order)
                    );
//                if ($this->getPayPreviousCredit()) {
//                    $value = (float)$this->getPayPreviousCreditValue();
//                    if ($value && $value > 0) {
//                        $balance->addTransaction(
//                            $value,
//                            Mirasvit_Credit_Model_Transaction::ACTION_MANUAL,
//                            'Pay previous credit'
//                        );
//                    }
//                }
                }
            }

            return $this;
        }
//        public function getQuoteId() {
//                return Mage::getSingleton('checkout/session')->getQuoteId();
//        }
        public function assignData($data)
        {
            parent::assignData($data); // TODO: Change the autogenerated stub
            if (!($data instanceof Varien_Object)) {
                $data = new Varien_Object($data);
            }
            $smStoreCredit = (float) $data->getSmStoreCredit();
            $smStoreCreditDue = (float) $data->getSmStoreCreditDue();
            if ($smStoreCredit > 0 || $smStoreCreditDue > 0) {
                $this->getInfoInstance()->setData(SM_StoreCredit_Model_Method_StoreCredit::PAY_CODE, $smStoreCredit);
                $this->getInfoInstance()->setData(SM_StoreCredit_Model_Method_StoreCreditDue::PAY_DUE_CODE, $smStoreCreditDue);
                $paymentData = new Varien_Object(Mage::app()->getRequest()->getPost('payment'));
                if ($paymentData->getData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_CODE)) {
                    $this->getInfoInstance()->setData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_CODE, $paymentData->getData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_CODE));
                }
                if ($paymentData->getData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_VALUE_CODE)) {
                    $this->getInfoInstance()->setData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_VALUE_CODE, $paymentData->getData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_VALUE_CODE));
                }
            } else {
                $this->unsetData(SM_StoreCredit_Model_Method_StoreCredit::PAY_CODE);
                $this->unsetData(SM_StoreCredit_Model_Method_StoreCreditDue::PAY_DUE_CODE);
                $this->unsetData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_CODE);
                $this->unsetData(SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_VALUE_CODE);
            }
            $data = $data->getData();

            $dataSplit = array();
            $dataModel = array();

//            $currentQuoteId = $this->getQuoteId();
//            $dataSplit['check_no'] = $currentQuoteId;
            foreach ($data as $k => $v) {
                if ($v != 0 && $k != 'enable') {
                    $dataSplit[$k] = $v;
                    $currentData = array(
//                        'check_no' => $currentQuoteId,
                        'code'     => $k,
                        'amount'   => $v,
                    );
                    $dataModel[] = $currentData;
                }
            }
            foreach ($dataModel as $k => $v) {
                $model = Mage::getModel("xpayment/xpayment");
                $model->addData($v);
                    $model->save();
            }
//        $checkNo = $data->getCheckNo();
//        $xposCashAmount = $data->getXposCash();
//        $xposCcAmount = $data->getXposCc();
//        $dataAddition=array(
//            'checkNo' => $checkNo,
//            'xposcash' => $xposCashAmount,
//            'xposcc' => $xposCcAmount,
//        );
            $this->getInfoInstance()->setAdditionalData(serialize($dataSplit));

            return $this;
        }


        public function validate()
        {
            return parent::validate(); // TODO: Change the autogenerated stub
        }

        public function isApplicableToQuote($quote, $checksBitMask)
        {
            return parent::isApplicableToQuote($quote, $checksBitMask); // TODO: Change the autogenerated stub
        }

        public function getPayCredit($type)
        {
            return $this->getInfoInstance()->getData($type);
        }
//
//        public function getPayPreviousCredit()
//        {
//            $key = SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_CODE;
//            return $this->getInfoInstance()->getData($key);
//        }
//
//        public function getPayPreviousCreditValue()
//        {
//            $key = SM_StoreCredit_Model_Method_StoreCredit::PAY_PREVIOUS_VALUE_CODE;
//            return $this->getInfoInstance()->getData($key);
//        }


    }
